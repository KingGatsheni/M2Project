<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbHome.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        iIghERAUoiAoREBERB//2Q==
</value>
  </data>
</root>